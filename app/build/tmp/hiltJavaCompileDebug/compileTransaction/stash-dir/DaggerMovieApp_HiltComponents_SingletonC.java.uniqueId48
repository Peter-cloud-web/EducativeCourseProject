// Generated by Dagger (https://dagger.dev).
package com.example.educativecourseproject.presentation;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.cinemaxv3.di.modules.CoilModule;
import com.example.cinemaxv3.viewmodels.TopRatedTvShowsViewModel.TopRatedTvShowsViewModel;
import com.example.cinemaxv3.viewmodels.TopRatedTvShowsViewModel.TopRatedTvShowsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.cinemaxv3.viewmodels.favouriteMoviesViewModel.FavouriteMoviesViewModel;
import com.example.cinemaxv3.viewmodels.favouriteMoviesViewModel.FavouriteMoviesViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.cinemaxv3.viewmodels.movieCastViewModel.MovieCastsViewModel;
import com.example.cinemaxv3.viewmodels.movieCastViewModel.MovieCastsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.cinemaxv3.viewmodels.movieReviewsViewModel.MovieReviewsViewModel;
import com.example.cinemaxv3.viewmodels.movieReviewsViewModel.MovieReviewsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.cinemaxv3.viewmodels.movieTrailerViewModel.MovieTrailerViewModel;
import com.example.cinemaxv3.viewmodels.movieTrailerViewModel.MovieTrailerViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.cinemaxv3.viewmodels.popularMoviesViewModel.PopularMoviesViewModel;
import com.example.cinemaxv3.viewmodels.popularMoviesViewModel.PopularMoviesViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.cinemaxv3.viewmodels.popularTvShowViewModel.PopularTvShowViewModel;
import com.example.cinemaxv3.viewmodels.popularTvShowViewModel.PopularTvShowViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.cinemaxv3.viewmodels.searchedMoviesViewModel.SearchedMoviesViewModel;
import com.example.cinemaxv3.viewmodels.searchedMoviesViewModel.SearchedMoviesViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.cinemaxv3.viewmodels.similarMoviesViewModel.SimilarMoviesViewModel;
import com.example.cinemaxv3.viewmodels.similarMoviesViewModel.SimilarMoviesViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.cinemaxv3.viewmodels.topRatedMovieViewModel.TopRatedMovieViewModel;
import com.example.cinemaxv3.viewmodels.topRatedMovieViewModel.TopRatedMovieViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.cinemaxv3.viewmodels.tvShowsAiringTodayViewModel.TvShowsAiringTodayViewModel;
import com.example.cinemaxv3.viewmodels.tvShowsAiringTodayViewModel.TvShowsAiringTodayViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.cinemaxv3.viewmodels.tvShowsOnTheAirViewModel.TvShowsOnTheAirViewModel;
import com.example.cinemaxv3.viewmodels.tvShowsOnTheAirViewModel.TvShowsOnTheAirViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.cinemaxv3.viewmodels.upComingMoviesViewModel.UpComingMoviesViewModel;
import com.example.cinemaxv3.viewmodels.upComingMoviesViewModel.UpComingMoviesViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.data.MovieApi;
import com.example.data.repository.CachedMoviesRepositoryImpl;
import com.example.data.repository.RemoteMoviesRepositoryImpl;
import com.example.di.RoomModule;
import com.example.di.RoomModule_ProvideDatabaseFactory;
import com.example.domain.use_cases.TVshows_airingToday_usecase.TvShowsAringTodayUseCase;
import com.example.domain.use_cases.TVshows_ontheair_usecase.TvShowsOnTheAirUseCase;
import com.example.domain.use_cases.favouritemovies_usecase.GetFavouriteMovieUseCase;
import com.example.domain.use_cases.movieReviews_usecase.MovieReviewUseCase;
import com.example.domain.use_cases.moviecasts_usecase.MovieCastsUseCase;
import com.example.domain.use_cases.movietrailer_usecase.MovieTrailerUseCase;
import com.example.domain.use_cases.popularMovies_usecase.PopularMoviesUseCase;
import com.example.domain.use_cases.popular_TVshows_usecase.PopularTvShowsUseCase;
import com.example.domain.use_cases.searchedMovies_usecase.SearchMoviesUseCase;
import com.example.domain.use_cases.similarmovies_usecase.SimilarMovieUseCase;
import com.example.domain.use_cases.top_rated_movies_usecase.TopRatedMoviesUseCase;
import com.example.domain.use_cases.toprated_TVshows_usecase.TopRatedTvShowsUseCase;
import com.example.domain.use_cases.upcomingMovies_usecase.UpComingMoviesUseCase;
import com.example.educativecourseproject.data.db.MovieDatabase;
import com.example.educativecourseproject.data.di.AppModule;
import com.example.educativecourseproject.presentation.ui.fragments.MoviesFragment;
import com.example.network.AppModule_GetHttpClientFactory;
import com.example.paging.pager.PopularMoviesImpl;
import com.example.paging.pager.PopularTvShowsImpl;
import com.example.paging.pager.TopRatedMovieImpl;
import com.example.paging.pager.TopRatedTvShowsImpl;
import com.example.paging.pager.TvShowsAiringTodayImpl;
import com.example.paging.pager.TvShowsOnTheAirImpl;
import com.example.paging.pager.UpComingMovieImpl;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerMovieApp_HiltComponents_SingletonC {
  private DaggerMovieApp_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(com.example.network.AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder coilModule(CoilModule coilModule) {
      Preconditions.checkNotNull(coilModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder roomModule(RoomModule roomModule) {
      Preconditions.checkNotNull(roomModule);
      return this;
    }

    public MovieApp_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MovieApp_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public MovieApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements MovieApp_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public MovieApp_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements MovieApp_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public MovieApp_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements MovieApp_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MovieApp_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements MovieApp_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MovieApp_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements MovieApp_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public MovieApp_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements MovieApp_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MovieApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends MovieApp_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends MovieApp_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectMoviesFragment(MoviesFragment moviesFragment) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends MovieApp_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends MovieApp_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(13).add(FavouriteMoviesViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MovieCastsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MovieReviewsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MovieTrailerViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(PopularMoviesViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(PopularTvShowViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SearchedMoviesViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SimilarMoviesViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(TopRatedMovieViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(TopRatedTvShowsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(TvShowsAiringTodayViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(TvShowsOnTheAirViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(UpComingMoviesViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends MovieApp_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<FavouriteMoviesViewModel> favouriteMoviesViewModelProvider;

    private Provider<MovieCastsViewModel> movieCastsViewModelProvider;

    private Provider<MovieReviewsViewModel> movieReviewsViewModelProvider;

    private Provider<MovieTrailerViewModel> movieTrailerViewModelProvider;

    private Provider<PopularMoviesViewModel> popularMoviesViewModelProvider;

    private Provider<PopularTvShowViewModel> popularTvShowViewModelProvider;

    private Provider<SearchedMoviesViewModel> searchedMoviesViewModelProvider;

    private Provider<SimilarMoviesViewModel> similarMoviesViewModelProvider;

    private Provider<TopRatedMovieViewModel> topRatedMovieViewModelProvider;

    private Provider<TopRatedTvShowsViewModel> topRatedTvShowsViewModelProvider;

    private Provider<TvShowsAiringTodayViewModel> tvShowsAiringTodayViewModelProvider;

    private Provider<TvShowsOnTheAirViewModel> tvShowsOnTheAirViewModelProvider;

    private Provider<UpComingMoviesViewModel> upComingMoviesViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    private GetFavouriteMovieUseCase getFavouriteMovieUseCase() {
      return new GetFavouriteMovieUseCase(singletonCImpl.cachedMoviesRepositoryImpl());
    }

    private MovieCastsUseCase movieCastsUseCase() {
      return new MovieCastsUseCase(singletonCImpl.remoteMoviesRepositoryImpl());
    }

    private MovieReviewUseCase movieReviewUseCase() {
      return new MovieReviewUseCase(singletonCImpl.remoteMoviesRepositoryImpl());
    }

    private MovieTrailerUseCase movieTrailerUseCase() {
      return new MovieTrailerUseCase(singletonCImpl.remoteMoviesRepositoryImpl());
    }

    private PopularMoviesUseCase popularMoviesUseCase() {
      return new PopularMoviesUseCase(singletonCImpl.popularMoviesImpl());
    }

    private PopularTvShowsUseCase popularTvShowsUseCase() {
      return new PopularTvShowsUseCase(singletonCImpl.popularTvShowsImpl());
    }

    private SearchMoviesUseCase searchMoviesUseCase() {
      return new SearchMoviesUseCase(singletonCImpl.remoteMoviesRepositoryImpl());
    }

    private SimilarMovieUseCase similarMovieUseCase() {
      return new SimilarMovieUseCase(singletonCImpl.remoteMoviesRepositoryImpl());
    }

    private TopRatedMoviesUseCase topRatedMoviesUseCase() {
      return new TopRatedMoviesUseCase(singletonCImpl.topRatedMovieImpl());
    }

    private TopRatedTvShowsUseCase topRatedTvShowsUseCase() {
      return new TopRatedTvShowsUseCase(singletonCImpl.topRatedTvShowsImpl());
    }

    private TvShowsAringTodayUseCase tvShowsAringTodayUseCase() {
      return new TvShowsAringTodayUseCase(singletonCImpl.tvShowsAiringTodayImpl());
    }

    private TvShowsOnTheAirUseCase tvShowsOnTheAirUseCase() {
      return new TvShowsOnTheAirUseCase(singletonCImpl.tvShowsOnTheAirImpl());
    }

    private UpComingMoviesUseCase upComingMoviesUseCase() {
      return new UpComingMoviesUseCase(singletonCImpl.upComingMovieImpl());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.favouriteMoviesViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.movieCastsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.movieReviewsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.movieTrailerViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.popularMoviesViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
      this.popularTvShowViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 5);
      this.searchedMoviesViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 6);
      this.similarMoviesViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 7);
      this.topRatedMovieViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 8);
      this.topRatedTvShowsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 9);
      this.tvShowsAiringTodayViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 10);
      this.tvShowsOnTheAirViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 11);
      this.upComingMoviesViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 12);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(13).put("com.example.cinemaxv3.viewmodels.favouriteMoviesViewModel.FavouriteMoviesViewModel", ((Provider) favouriteMoviesViewModelProvider)).put("com.example.cinemaxv3.viewmodels.movieCastViewModel.MovieCastsViewModel", ((Provider) movieCastsViewModelProvider)).put("com.example.cinemaxv3.viewmodels.movieReviewsViewModel.MovieReviewsViewModel", ((Provider) movieReviewsViewModelProvider)).put("com.example.cinemaxv3.viewmodels.movieTrailerViewModel.MovieTrailerViewModel", ((Provider) movieTrailerViewModelProvider)).put("com.example.cinemaxv3.viewmodels.popularMoviesViewModel.PopularMoviesViewModel", ((Provider) popularMoviesViewModelProvider)).put("com.example.cinemaxv3.viewmodels.popularTvShowViewModel.PopularTvShowViewModel", ((Provider) popularTvShowViewModelProvider)).put("com.example.cinemaxv3.viewmodels.searchedMoviesViewModel.SearchedMoviesViewModel", ((Provider) searchedMoviesViewModelProvider)).put("com.example.cinemaxv3.viewmodels.similarMoviesViewModel.SimilarMoviesViewModel", ((Provider) similarMoviesViewModelProvider)).put("com.example.cinemaxv3.viewmodels.topRatedMovieViewModel.TopRatedMovieViewModel", ((Provider) topRatedMovieViewModelProvider)).put("com.example.cinemaxv3.viewmodels.TopRatedTvShowsViewModel.TopRatedTvShowsViewModel", ((Provider) topRatedTvShowsViewModelProvider)).put("com.example.cinemaxv3.viewmodels.tvShowsAiringTodayViewModel.TvShowsAiringTodayViewModel", ((Provider) tvShowsAiringTodayViewModelProvider)).put("com.example.cinemaxv3.viewmodels.tvShowsOnTheAirViewModel.TvShowsOnTheAirViewModel", ((Provider) tvShowsOnTheAirViewModelProvider)).put("com.example.cinemaxv3.viewmodels.upComingMoviesViewModel.UpComingMoviesViewModel", ((Provider) upComingMoviesViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.cinemaxv3.viewmodels.favouriteMoviesViewModel.FavouriteMoviesViewModel 
          return (T) new FavouriteMoviesViewModel(viewModelCImpl.getFavouriteMovieUseCase(), singletonCImpl.cachedMoviesRepositoryImpl());

          case 1: // com.example.cinemaxv3.viewmodels.movieCastViewModel.MovieCastsViewModel 
          return (T) new MovieCastsViewModel(viewModelCImpl.movieCastsUseCase());

          case 2: // com.example.cinemaxv3.viewmodels.movieReviewsViewModel.MovieReviewsViewModel 
          return (T) new MovieReviewsViewModel(viewModelCImpl.movieReviewUseCase());

          case 3: // com.example.cinemaxv3.viewmodels.movieTrailerViewModel.MovieTrailerViewModel 
          return (T) new MovieTrailerViewModel(viewModelCImpl.movieTrailerUseCase());

          case 4: // com.example.cinemaxv3.viewmodels.popularMoviesViewModel.PopularMoviesViewModel 
          return (T) new PopularMoviesViewModel(viewModelCImpl.popularMoviesUseCase(), singletonCImpl.remoteMoviesRepositoryImpl());

          case 5: // com.example.cinemaxv3.viewmodels.popularTvShowViewModel.PopularTvShowViewModel 
          return (T) new PopularTvShowViewModel(viewModelCImpl.popularTvShowsUseCase());

          case 6: // com.example.cinemaxv3.viewmodels.searchedMoviesViewModel.SearchedMoviesViewModel 
          return (T) new SearchedMoviesViewModel(viewModelCImpl.searchMoviesUseCase());

          case 7: // com.example.cinemaxv3.viewmodels.similarMoviesViewModel.SimilarMoviesViewModel 
          return (T) new SimilarMoviesViewModel(viewModelCImpl.similarMovieUseCase());

          case 8: // com.example.cinemaxv3.viewmodels.topRatedMovieViewModel.TopRatedMovieViewModel 
          return (T) new TopRatedMovieViewModel(viewModelCImpl.topRatedMoviesUseCase());

          case 9: // com.example.cinemaxv3.viewmodels.TopRatedTvShowsViewModel.TopRatedTvShowsViewModel 
          return (T) new TopRatedTvShowsViewModel(viewModelCImpl.topRatedTvShowsUseCase());

          case 10: // com.example.cinemaxv3.viewmodels.tvShowsAiringTodayViewModel.TvShowsAiringTodayViewModel 
          return (T) new TvShowsAiringTodayViewModel(viewModelCImpl.tvShowsAringTodayUseCase());

          case 11: // com.example.cinemaxv3.viewmodels.tvShowsOnTheAirViewModel.TvShowsOnTheAirViewModel 
          return (T) new TvShowsOnTheAirViewModel(viewModelCImpl.tvShowsOnTheAirUseCase());

          case 12: // com.example.cinemaxv3.viewmodels.upComingMoviesViewModel.UpComingMoviesViewModel 
          return (T) new UpComingMoviesViewModel(viewModelCImpl.upComingMoviesUseCase());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends MovieApp_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends MovieApp_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends MovieApp_HiltComponents.SingletonC {
    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<MovieDatabase> provideDatabaseProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam) {
      this.applicationContextModule = applicationContextModuleParam;
      initialize(applicationContextModuleParam);

    }

    private CachedMoviesRepositoryImpl cachedMoviesRepositoryImpl() {
      return new CachedMoviesRepositoryImpl(provideDatabaseProvider.get());
    }

    private MovieApi movieApi() {
      return new MovieApi(AppModule_GetHttpClientFactory.getHttpClient());
    }

    private RemoteMoviesRepositoryImpl remoteMoviesRepositoryImpl() {
      return new RemoteMoviesRepositoryImpl(movieApi());
    }

    private PopularMoviesImpl popularMoviesImpl() {
      return new PopularMoviesImpl(provideDatabaseProvider.get(), remoteMoviesRepositoryImpl());
    }

    private PopularTvShowsImpl popularTvShowsImpl() {
      return new PopularTvShowsImpl(remoteMoviesRepositoryImpl());
    }

    private TopRatedMovieImpl topRatedMovieImpl() {
      return new TopRatedMovieImpl(provideDatabaseProvider.get(), remoteMoviesRepositoryImpl());
    }

    private TopRatedTvShowsImpl topRatedTvShowsImpl() {
      return new TopRatedTvShowsImpl(provideDatabaseProvider.get(), remoteMoviesRepositoryImpl());
    }

    private TvShowsAiringTodayImpl tvShowsAiringTodayImpl() {
      return new TvShowsAiringTodayImpl(remoteMoviesRepositoryImpl());
    }

    private TvShowsOnTheAirImpl tvShowsOnTheAirImpl() {
      return new TvShowsOnTheAirImpl(remoteMoviesRepositoryImpl());
    }

    private UpComingMovieImpl upComingMovieImpl() {
      return new UpComingMovieImpl(provideDatabaseProvider.get(), remoteMoviesRepositoryImpl());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam) {
      this.provideDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<MovieDatabase>(singletonCImpl, 0));
    }

    @Override
    public void injectMovieApp(MovieApp movieApp) {
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.educativecourseproject.data.db.MovieDatabase 
          return (T) RoomModule_ProvideDatabaseFactory.provideDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
